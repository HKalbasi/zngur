#convert_panic_to_exception

type str {
    wellknown_traits(?Sized, Debug);

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
    fn to_owned(&self) -> ::std::string::String;
}

type ::std::string::String {
    #layout(size = 24, align = 8);
    wellknown_traits(Debug);

    fn push_str(&mut self, &str);
    fn len(&self) -> usize;
}

type crate::Foo {
    #layout(size = 32, align = 8);
    wellknown_traits(Debug);

    constructor { field1: i32, field2: ::std::string::String };
    field field2 (offset = 0, type = ::std::string::String);
}

type (::std::string::String, crate::Foo) {
    #layout(size = 56, align = 8);
    wellknown_traits(Debug);

    field 0 (offset = 0, type = ::std::string::String);
    field 1 (offset = 24, type = crate::Foo);
}

type crate::Scoped {
    #layout(size = 16, align = 8);

    fn new(&str) -> crate::Scoped;
}