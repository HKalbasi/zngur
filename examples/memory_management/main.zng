#convert_panic_to_exception

type () {
    layout(size = 0, align = 1);
    wellknown_traits(Copy);
}

type bool {
    layout(size = 1, align = 1);
    wellknown_traits(Copy);
}

type str {
    wellknown_traits(?Sized);
}

mod crate {
    type PrintOnDrop {
        layout(size = 16, align = 8);
        constructor(&str);

        fn clone(&self) -> PrintOnDrop;
    }

    trait PrintOnDropConsumer {
        fn consume(&mut self, PrintOnDrop);
    }

    type Box<dyn PrintOnDropConsumer> {
        layout(size = 16, align = 8);
    
        fn deref_mut(&mut self) -> &mut dyn PrintOnDropConsumer use ::std::ops::DerefMut;
    }

    type dyn PrintOnDropConsumer {
        wellknown_traits(?Sized);
    }

    fn consume_n_times(&mut dyn PrintOnDropConsumer, &str, usize);
    fn consume_and_panic(PrintOnDrop, bool) -> PrintOnDrop;
}

mod ::std {
    mod vec {
        type Vec<crate::PrintOnDrop> {
            layout(size = 24, align = 8);

            fn new() -> Vec<crate::PrintOnDrop>;
            fn push(&mut self, crate::PrintOnDrop);
            fn clone(&self) -> Vec<crate::PrintOnDrop>;
        }
    }
}

