#convert_panic_to_exception

type () {
    #layout(size = 0, align = 1);
    wellknown_traits(Copy);
}

type (i32, u32) {
    #layout(size = 8, align = 4);
    wellknown_traits(Copy);
}

type bool {
    #layout(size = 1, align = 1);
    wellknown_traits(Copy);
}

type str {
    wellknown_traits(?Sized);
}

type Box<dyn Fn() -> ::std::option::Option<crate::PrintOnDrop>> {
    #layout(size = 16, align = 8);
}

type Box<dyn Fn(crate::PrintOnDrop)> {
    #layout(size = 16, align = 8);
}

mod crate {
    type PrintOnDropPair {
        #layout(size = 32, align = 8);

        constructor { first: PrintOnDrop, second: PrintOnDrop };
    }

    type PrintOnDrop {
        #layout(size = 16, align = 8);
        wellknown_traits(Debug);
        constructor(&str);

        fn clone(&self) -> PrintOnDrop;
    }

    type [PrintOnDrop] {
        wellknown_traits(?Sized);

        fn get(&self, usize) -> ::std::option::Option<&crate::PrintOnDrop>;    
    }

    trait PrintOnDropConsumer {
        fn consume(&mut self, PrintOnDrop);
    }

    type Box<dyn PrintOnDropConsumer> {
        #layout(size = 16, align = 8);
    
        fn deref_mut(&mut self) -> &mut dyn PrintOnDropConsumer use ::std::ops::DerefMut;
    }

    type dyn PrintOnDropConsumer {
        wellknown_traits(?Sized);
    }

    fn consume_n_times(&mut dyn PrintOnDropConsumer, &str, usize);
    fn consume_and_panic(PrintOnDrop, bool) -> PrintOnDrop;
}

mod ::std {
    mod option {
        type Option<&crate::PrintOnDrop> {
            #layout(size = 8, align = 8);

            fn unwrap(self) -> &crate::PrintOnDrop;
        }

        type Option<crate::PrintOnDrop> {
            #layout(size = 16, align = 8);

            constructor Some(crate::PrintOnDrop);
            constructor None;

            fn take(&mut self) -> Option<crate::PrintOnDrop>;
        }
    }

    mod iter {
        type FromFn<Box<dyn Fn() -> ::std::option::Option<crate::PrintOnDrop>>> {
            #layout(size = 16, align = 8);
        
            fn for_each<Box<dyn Fn(crate::PrintOnDrop)>>(self, Box<dyn Fn(crate::PrintOnDrop)>);
        }

        fn from_fn<crate::PrintOnDrop, Box<dyn Fn() -> ::std::option::Option<crate::PrintOnDrop>>>(
            Box<dyn Fn() -> ::std::option::Option<crate::PrintOnDrop>>
        ) -> FromFn<Box<dyn Fn() -> ::std::option::Option<crate::PrintOnDrop>>>;
    }

    mod vec {
        type Vec<crate::PrintOnDrop> {
            #layout(size = 24, align = 8);

            fn new() -> Vec<crate::PrintOnDrop>;
            fn push(&mut self, crate::PrintOnDrop);
            fn clone(&self) -> Vec<crate::PrintOnDrop>;
            fn get(&self, usize) -> ::std::option::Option<&crate::PrintOnDrop> deref [crate::PrintOnDrop];
            fn deref(&self) -> &[crate::PrintOnDrop] use ::std::ops::Deref;
        }
    }
}

