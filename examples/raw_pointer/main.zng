#convert_panic_to_exception

type str {
    wellknown_traits(?Sized);

    fn to_owned(&self) -> ::std::string::String;
}

type ::std::string::String {
    #heap_allocated;
}

type [i32] {
    wellknown_traits(?Sized);

    fn as_ptr(&self) -> *const i32;
    fn len(&self) -> usize;
    fn to_vec(&self) -> ::std::vec::Vec<i32>;
}

mod ::std {
    mod option {
        type Option<&mut ::std::vec::Vec<i32>> {
            #layout(size = 8, align = 8);
            
            fn unwrap(self) -> &mut ::std::vec::Vec<i32>;
        }
    }

    mod vec {
        type Vec<i32> {
            #layout(size = 24, align = 8);
            wellknown_traits(Debug);

            fn new() -> Vec<i32>;
            fn push(&mut self, i32);
            fn clone(&self) -> Vec<i32>;
            fn reserve(&mut self, usize);
            fn set_len(&mut self, usize);
            fn as_mut_ptr(&mut self) -> *mut i32;
        }

        type Vec<Vec<i32>> {
            #layout(size = 24, align = 8);
            wellknown_traits(Debug);

            fn new() -> Vec<Vec<i32>>;
            fn push(&mut self, Vec<i32>);
            fn clone(&self) -> Vec<Vec<i32>>;
            fn get_mut(&mut self, usize) -> ::std::option::Option<&mut Vec<i32>> deref [Vec<i32>];
            fn reserve(&mut self, usize);
            fn set_len(&mut self, usize);
            fn as_mut_ptr(&mut self) -> *mut Vec<i32>;
            fn as_ptr(&self) -> *const Vec<i32>;
        }
    }
}
