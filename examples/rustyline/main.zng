type () {
    layout(size = 0, align = 1);
    wellknown_traits(Copy);
}

type ::core::primitive::str {
    wellknown_traits(?Sized);

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
}

type bool {
    layout(size = 1, align = 1);
    wellknown_traits(Copy);
}

mod ::std {
    type string::String {
        #only_by_ref;
        fn as_str(&self) -> &::core::primitive::str;
    }
}

mod ::rustyline {
    type error::ReadlineError {
        #heap_allocated;

        constructor Interrupted;
        constructor Eof;
    }

    type Result<DefaultEditor> {
        #heap_allocated;

        fn unwrap(self) -> DefaultEditor;
    }

    type ::std::result::Result<&::std::string::String, &error::ReadlineError> {
        #heap_allocated;

        fn unwrap(self) -> &::std::string::String;
    }

    type Result<::std::string::String> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
        fn as_ref(&self) -> ::std::result::Result<&::std::string::String, &error::ReadlineError>;
        fn unwrap_err(self) -> error::ReadlineError;
    }

    type Result<()> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
    }

    type Result<bool> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
    }

    type DefaultEditor {
        #heap_allocated;
    
        fn new() -> Result<DefaultEditor>;
        fn readline(&mut self, &::core::primitive::str) -> Result<::std::string::String>;
        fn load_history<::core::primitive::str>(&mut self, &::core::primitive::str) -> Result<()>;
        fn add_history_entry<&::core::primitive::str>(&mut self, &::core::primitive::str) -> Result<bool>;
        fn save_history<::core::primitive::str>(&mut self, &::core::primitive::str) -> Result<()>;
    }
}

mod crate {
    fn rust_str(*const i8) -> &::core::primitive::str;
}
