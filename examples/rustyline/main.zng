// This example uses various layout policies to demonstrate them. See https://hkalbasi.github.io/zngur/call_rust_from_cpp/layout_policy.html

type () {
    #layout(size = 0, align = 1); // Unit type has stable layout
    wellknown_traits(Copy);
}

type str {
    wellknown_traits(?Sized); // Unsized types don't need layout policy

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
}

type bool {
    #layout(size = 1, align = 1); // primitives like bool have stable layout
    wellknown_traits(Copy);
}

mod ::std {
    type string::String {
        #only_by_ref; // String has stable layout, but we don't use it by value, so we can use this policy.
        fn as_str(&self) -> &str;
    }
}

mod ::rustyline {
    type DefaultEditor {
        // DefaultEditor is a complex type defined by rustyline crate, so its layout may break
        // when upgrading the compiler or the rustyline itself. We can easily manage this kind
        // of breakage when we control the final binary build process, but when we don't control, it
        // can break. Using `#heap_allocate` we don't need to know the layout information at compile time.
        #heap_allocated;
    
        fn new() -> Result<DefaultEditor>;
        fn readline(&mut self, &str) -> Result<::std::string::String>;
        fn load_history<str>(&mut self, &str) -> Result<()>;
        fn add_history_entry<&str>(&mut self, &str) -> Result<bool>;
        fn save_history<str>(&mut self, &str) -> Result<()>;
    }

    type error::ReadlineError {
        #heap_allocated;

        constructor Interrupted;
        constructor Eof;
    }

    type Result<DefaultEditor> {
        #heap_allocated;

        fn unwrap(self) -> DefaultEditor;
    }

    type ::std::result::Result<&::std::string::String, &error::ReadlineError> {
        #heap_allocated;

        fn unwrap(self) -> &::std::string::String;
    }

    type Result<::std::string::String> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
        fn as_ref(&self) -> ::std::result::Result<&::std::string::String, &error::ReadlineError>;
        fn unwrap_err(self) -> error::ReadlineError;
    }

    type Result<()> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
    }

    type Result<bool> {
        #heap_allocated;
    
        fn is_err(&self) -> bool;
    }
}
