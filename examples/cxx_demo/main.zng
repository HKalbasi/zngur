type [u8] {
    wellknown_traits(?Sized);

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
}

type ::core::primitive::str {
    wellknown_traits(?Sized);

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
}

mod crate {
    type MultiBuf {
        #layout(size = 32, align = 8);

        fn next_chunk(&mut self) -> &[u8];
    }

    type BlobMetadata {
        #layout(size = 32, align = 8);

        fn default() -> BlobMetadata;  
        fn set_size(&mut self, usize);
        fn push_tag(&mut self, *const i8);
    }

    trait BlobStoreTrait {
        fn put(&self, &mut MultiBuf) -> u64;
        fn tag(&self, u64, &::core::primitive::str);
        fn metadata(&self, u64) -> BlobMetadata;
    }

    type Box<dyn BlobStoreTrait> {
        #layout(size = 16, align = 8);
    }
}

extern "C++" {
    fn new_blob_store_client() -> Box<dyn crate::BlobStoreTrait>;
}
