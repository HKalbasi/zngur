#cpp_additional_includes "
    #include <inventory.h>
"

type str {
    wellknown_traits(?Sized);

    fn as_ptr(&self) -> *const u8;
    fn len(&self) -> usize;
}

type ::std::ffi::CStr {
    wellknown_traits(?Sized);

    fn from_ptr(*const i8) -> &::std::ffi::CStr;
    fn to_str(&self) -> ::std::result::Result<&str, ::std::str::Utf8Error>;
}

type ::std::result::Result<&str, ::std::str::Utf8Error> {
    #layout(size = 24, align = 8);

    fn expect(self, &str) -> &str;
}

type crate::Inventory {
    #layout(size = 16, align = 8);

    constructor(ZngurCppOpaqueOwnedObject);

    #cpp_value "0" "::cpp_inventory::Inventory";
}

type crate::Item {
    #layout(size = 16, align = 8);

    constructor(ZngurCppOpaqueOwnedObject);

    #cpp_value "0" "::cpp_inventory::Item";
}

type ::std::fmt::Result {
    #layout(size = 1, align = 1);

    constructor Ok(());
}

type ::std::fmt::Formatter {
    #only_by_ref;

    fn write_str(&mut self, &str) -> ::std::fmt::Result;
}

extern "C++" {
    impl crate::Inventory {
        fn new_empty(u32) -> crate::Inventory;
        fn add_banana(&mut self, u32);
        fn add_item(&mut self, crate::Item);
    }

    impl crate::Item {
        fn new(&str, u32) -> crate::Item;
    }

    impl std::fmt::Debug for crate::Inventory {
        fn fmt(&self, &mut ::std::fmt::Formatter) -> ::std::fmt::Result;
    }
}
