#include "<%- self.header_file_name %>"

extern "C" {

<% for (_, td) in self.trait_defs { %>
  <% if let CppTraitDefinition::Fn { .. } = td { %>
  <% } else if let CppTraitDefinition::Normal { as_ty, methods, link_name: _, link_name_ref: _ } = td { %>
    <% for method in methods { %>
      void <%- method.rust_link_name %>(
        uint8_t* data <% for n in 0..method.inputs.len() { %>, uint8_t* i<%- n %><% } %>, uint8_t* o
      ) {
        <%- as_ty %>* data_typed = reinterpret_cast< <%- as_ty %>* >(data);
        <%- method.output %> oo = data_typed-><%- method.name %>(
          <%- method.inputs.iter().enumerate().map(|(n, ty)| format!("::rust::__zngur_internal_move_from_rust< {ty} >(i{n})")).join(", ") %>
        );
        ::rust::__zngur_internal_move_to_rust(o, oo);
      }
    <% } %>
  <% } %>
<% } %>

<% for func in self.exported_fn_defs { %>
  void <%- func.sig.rust_link_name %>(
    <% for n in 0..func.sig.inputs.len() { %>uint8_t* i<%- n %>, <% } %>uint8_t* o
  ) {
    <%- func.sig.output %> oo = ::rust::exported_functions::<%- func.name %>(
      <%- func.sig.inputs.iter().enumerate().map(|(n, ty)| format!("::rust::__zngur_internal_move_from_rust< {ty} >(i{n})")).join(", ") %>
    );
    ::rust::__zngur_internal_move_to_rust(o, oo);
  }
<% } %>

<% for imp in self.exported_impls { %>
  <% for (name, sig) in &imp.methods { %>
    void <%- sig.rust_link_name %>(
      <% for n in 0..sig.inputs.len() { %>uint8_t* i<%- n %>, <% } %>uint8_t* o
    ) {
      <%- sig.output %> oo = ::rust::Impl< <%- imp.ty %>, <%- match &imp.tr { Some(x) => format!("{x}"), None => "::rust::Inherent".to_string() } %> >::<%- name %>(
        <%- sig.inputs.iter().enumerate().map(|(n, ty)| format!("::rust::__zngur_internal_move_from_rust< {ty} >(i{n})")).join(", ") %>
      );
      ::rust::__zngur_internal_move_to_rust(o, oo);
    }
  <% } %>
<% } %>

} // extern "C"
