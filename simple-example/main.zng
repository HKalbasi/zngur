type () {
    properties(size = 0, align = 1, is_copy = 1);
}

type Box<dyn Fn(i32) -> i32> {
    properties(size = 16, align = 8);
}

mod ::std {
    type option::Option<i32> {
        properties(size = 8, align = 4, is_copy = 1);

        constructor None;
        constructor Some(i32);

        fn unwrap(self) -> i32;
    }

    type iter::Map<::std::vec::IntoIter<i32>, Box<dyn Fn(i32) -> i32>> {
        properties(size = 48, align = 8);

        fn sum<i32>(self) -> i32;
    }
    
    mod vec {
        type IntoIter<i32> {
            properties(size = 32, align = 8);

            fn sum<i32>(self) -> i32;
            fn map<i32, Box<dyn Fn(i32) -> i32>>(self, Box<dyn Fn(i32) -> i32>)
                -> ::std::iter::Map<::std::vec::IntoIter<i32>, Box<dyn Fn(i32) -> i32>>;
        }

        type Vec<i32> {
            properties(size = 24, align = 8);

            fn new() -> Vec<i32>;
            fn push(&mut self, i32);
            fn clone(&self) -> Vec<i32>;
            fn into_iter(self) -> ::std::vec::IntoIter<i32>;
        }
    }

    trait iter::Iterator::<Item = i32> {
        fn next(&mut self) -> ::std::option::Option<i32>;
    }
}

mod crate {
    fn collect_vec(Box<dyn ::std::iter::Iterator<Item = i32>>) -> ::std::vec::Vec<i32>;
}
